% 作业内容见课件第24和47页。以下是24页代码示例，请补充for循环内容。
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 版权声明
% 黄小平，王岩 著，《卡尔曼滤波原理及应用-MATLAB仿真》第2版，电子工业出版社
% 开发时间：2021-9-25
% 功能说明：Kalman滤波用在一维温度数据测量系统中
% function main3_2_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
N=120;%采样点的个数，时间单位是分钟，可理解为试验进行了60分钟的测量
CON=25;%室内温度的理论值，在这个理论值得基础上受过程噪声会有波动
% 对状态和测量初始化
Xexpect=CON*ones(1,N); %期望的温度是恒定的25℃，但真实温度不可能会这样的
X=zeros(1,N); % 房间各时刻真实温度值
Xkf=zeros(1,N); % Kalman滤波处理的状态，也叫估计值
Z=zeros(1,N); % 温度计测量值
P=zeros(1,N);
%赋初值
X(1)=25.1; %假如初始值房间温度为25.1℃
P(1)=0.01; %初始值的协方差
Z(1)=24.9;
Xkf(1)=Z(1); %初始测量值为24.9℃，可以作为滤波器的初始估计状态
% 噪声
Q=0.01;
R=0.25;
W=sqrt(Q)*randn(1,N); % 方差决定噪声的大小
V=sqrt(R)*randn(1,N); % 方差决定噪声的大小
% 系统矩阵，变量名可修改
F=1;
G=1;
H=1;
I=eye(1); %本系统状态为一维
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 模拟房间温度和测量过程，并滤波
for k=2:N
    % 第一步：随时间推移，房间真实温度波动变化
    X(k) = F * X(k-1) + G * W(k);
    
    % 第二步：随时间推移，获取实时数据
    Z(k) = H * X(k) + V(k);
    
    % 第三步：Kalman滤波
    % 预测
    Xkf(k) = F * Xkf(k-1);
    P(k) = F * P(k-1) * F' + Q;
    
    % 更新
    K = P(k) * H' / (H * P(k) * H' + R);
    Xkf(k) = Xkf(k) + K * (Z(k) - H * Xkf(k));
    P(k) = (I - K * H) * P(k);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 计算误差
Err_Messure=zeros(1,N);% 测量值与真实值之间的偏差
Err_Kalman=zeros(1,N);% Kalman估计与真实值之间的偏差
for k=1:N
Err_Messure(k)=abs(Z(k)-X(k));
Err_Kalman(k)=abs(Xkf(k)-X(k));
end
t=1:N;
% figure('Name','Kalman Filter Simulation','NumberTitle','off');
figure % 画图显示
% 依次输出理论值，叠加过程噪声（受波动影响）的真实值，
% 温度计测量值，kalman估计值
plot(t,Xexpect,'-b',t,X,'-r.',t,Z,'-ko',t,Xkf,'-g*');
legend('期望值','真实值','观测值','Kalman滤波值');
xlabel('采样时间/s');
ylabel('温度值/℃');
% 误差分析图
figure % 画图显示
plot(t,Err_Messure,'-b.',t,Err_Kalman,'-k*');
legend('测量偏差','Kalman滤波偏差');
xlabel('采样时间/s');
ylabel('温度偏差值/℃');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 版权声明
% 黄小平，王岩 著，《卡尔曼滤波原理及应用-MATLAB仿真》第2版，电子工业出版社
% 功能说明：Kalman滤波在船舶GPS导航定位系统中的应用
% 开发时间：2021-9-25
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% function main3_4_2
clc;clear;
T=1;%雷达扫描周期
N=80/T; %总的采样次数
X=zeros(4,N); % 目标真实位置、速度
X(:,1)=[-100,2,200,20];% 目标初始位置、速度
Z=zeros(2,N); % 传感器对位置的观测
Z(:,1)=[X(1,1),X(3,1)]; % 观测初始化
delta_w=1e-2; %如果增大这个参数，目标真实轨迹就是曲线了
Q=delta_w*diag([0.5,1,0.5,1]) ; % 过程噪声均值
R=100*eye(2); %观测噪声均值
F=[1,T,0,0;0,1,0,0;0,0,1,T;0,0,0,1]; % 状态转移矩阵
H=[1,0,0,0;0,0,1,0]; % 观测矩阵
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for t=2:N
X(:,t)=F*X(:,t-1)+sqrtm(Q)*randn(4,1);%目标真实轨迹
Z(:,t)=H*X(:,t)+sqrtm(R)*randn(2,1); %对目标观测
end
% Kalman滤波
Xkf=zeros(4,N);
Xkf(:,1)=X(:,1); % Kalman滤波状态初始化
P0=eye(4); % 协方差阵初始化
for i=2:N
    % 预测
    Xkf(:,i) = F * Xkf(:,i-1);
    
    % 预测误差协方差
    P0 = F * P0 * F' + Q;
    
    % 增益
    K = P0 * H' / (H * P0 * H' + R);
    
    % 状态更新
    Xkf(:,i) = Xkf(:,i) + K * (Z(:,i) - H * Xkf(:,i));
    
    % 滤波误差协方差更新
    P0 = (eye(4) - K * H) * P0;
end
% 误差分析
for i=1:N
Err_Observation(i)=RMS(X(:,i),Z(:,i)); % 滤波前的误差
Err_KalmanFilter(i)=RMS(X(:,i),Xkf(:,i)); % 滤波后的误差
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 画图
figure
hold on;box on;
plot(X(1,:),X(3,:),'-k'); % 真实轨迹
plot(Z(1,:),Z(2,:),'-b.'); % 观测轨迹
plot(Xkf(1,:),Xkf(3,:),'-r+'); % Kalman滤波轨迹
legend('真实轨迹','观测轨迹','滤波轨迹');
xlabel('横坐标X/m');
ylabel('纵坐标Y/m');
figure
hold on; box on;
plot(Err_Observation,'-ko','MarkerFace','g')
plot(Err_KalmanFilter,'-ks','MarkerFace','r')
legend('滤波前误差','滤波后误差')
xlabel('观测时间/s');
ylabel('误差值');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 计算欧氏距离子函数
function dist=RMS(X1,X2)
if length(X2)<=2
dist=sqrt( (X1(1)-X2(1))^2 + (X1(3)-X2(2))^2 );
else
dist=sqrt( (X1(1)-X2(1))^2 + (X1(3)-X2(3))^2 );
end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%